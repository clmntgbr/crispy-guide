{% extends 'base.html.twig' %}

{% block title %}
    {{ gasStation.name }} - {{ gasStation.address.vicinity }}
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"/>
{% endblock %}

{% block body %}
    <header>
        <img src="{{ asset(gasStation.preview.path) }}{{ asset(gasStation.preview.name) }}" alt="{{ gasStation.name }}"/>
        <section class="presentation container">
            <h1>{{ gasStation.name }} - {{ gasStation.company }}</h1><br>
            <h2><a href="{% if gasStation.googlePlace is not null and gasStation.googlePlace.url %}{{ gasStation.googlePlace.url }}{% else %}{{ gas_station_google_map_url }}{% endif %}" target="_blank" data-tooltip="Open in Google Map" data-position="bottom center" data-inverted="">{{ gasStation.address.vicinity }}</a></h2>
        </section>
    </header>

    <section class="information container">
        <div class="row last_prices">
            {% for gas_type in gas_types %}
                <div class="col-lg-4 col-sm-6 col-xs-12 types">
                    {% if last_gas_prices[gas_type.id] is defined %}
                        {% set gas_price = last_gas_prices[gas_type.id] %}
                        {% if previous_gas_prices[gas_price.gas_type_id] is defined %}
                            {% if gas_price['price'] > previous_gas_prices[gas_price.gas_type_id]['price'] %}
                                {% set gas_price_color = 'color_red' %}
                            {% elseif gas_price['price'] <= previous_gas_prices[gas_price.gas_type_id]['price'] %}
                                {% set gas_price_color = 'color_orange' %}
                            {% else %}
                                {% set gas_price_color = 'color_green' %}
                            {% endif %}
                        {% else %}
                            {% set gas_price_color = 'color_green' %}
                        {% endif %}

                        <div class="item {{ gas_type.reference }} last_gas_prices_{{ gas_price_color }}">
                            <a href="" class="name">{{ gas_type.label }}</a>
                            <p class="price">{{ gas_price.price/1000 }} €</p>
                            <p class="date">Dernière MAJ le {{ gas_price.date|date('d/m/Y') }}</p>
                        </div>
                    {% else %}
                        <div class="item {{ gas_type.reference }}">
                            <a href="" class="name">{{ gas_type.label }}</a>
                            <p class="price small">NaN</p>
                            <p class="date">Pas de MAJ</p>
                        </div>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    </section>

    <section class="map">
        <div id="map" class="gas_station"></div>
    </section>

    <section class="prices container">
        <div class="row gas_prices">
            <div class="ui form" id="gas_year">
                <div class="field">
                    <select id="gas_years" class="ui search dropdown">
                        {% for gas_price_year in gas_prices_years %}
                            <option value="{{ gas_price_year }}" {% if gas_price_year == year_now %}selected{% endif %}>{{ gas_price_year }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>
            <div class="col-lg-12 chart_prices"></div>
        </div>
    </section>

{% endblock %}

{% block javascripts %}
    <script type="application/javascript" src="https://code.highcharts.com/highcharts.js"></script>
    <script type="application/javascript" src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>

    <script  type="application/javascript">
        const defaultCoordinate = {'latitude': 48.855680, 'longitude': 2.347045}
        var markers = {}

        map = L.map('map').setView([parseFloat({{ gasStation.address.latitude }}), parseFloat({{ gasStation.address.longitude }})], 12)
        map.scrollWheelZoom.disable()
        L.control.scale().addTo(map)

        L.tileLayer('http://a.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
            minZoom: 1,
            maxZoom: 20
        }).addTo(map)

        map.locate()

        var group = L.featureGroup().addTo(map)

        var normal = L.icon({
            iconUrl: '{{ asset('img/marker/normal.png') }}',
        })

        var user = L.icon({
            iconUrl: '{{ asset('img/marker/user.png') }}',
        })

        L.marker([parseFloat({{ gasStation.address.latitude }}), parseFloat({{ gasStation.address.longitude }})], {icon: normal}).addTo(group)

        map.on('locationfound', function (e) {
            console.log('locationfound')
            var radius = e.accuracy;
            L.marker(e.latlng).addTo(map)
        })

        function loadCharts(element, gasType) {
            Highcharts.setOptions({
                lang: {
                    shortMonths: [
                        'Janvier', 'Février', 'Mars', 'Avril',
                        'Mai', 'Juin', 'Juillet', 'Août',
                        'Septembre', 'Octobre', 'Novembre', 'Décembre'
                    ],
                }
            })

            Highcharts.chart(gasType['reference'] + '_chart', {
                chart: {
                    borderWidth: 1,
                    spacingBottom: 45,
                    spacingTop: 25,
                    spacingLeft: 10,
                    spacingRight: 10,
                    borderColor: 'rgb(230, 230, 230)',
                    zoomType: 'x',
                    style: {
                        fontFamily: 'Raleway',
                    }
                },
                title: {
                    text: '<p style="font-family: Raleway-Bold, sans-serif;">Prix du '+ gasType['label'] + ' </p>',
                },
                xAxis: {
                    type: 'datetime'
                },
                yAxis: {
                    title: {
                        text: 'Prix (€)'
                    }
                },
                legend: {
                    enabled: false
                },
                plotOptions: {
                    area: {
                        marker: {
                            radius: 2
                        },
                        lineWidth: 1,
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        },
                        threshold: null
                    },
                    series: {
                        allowPointSelect: true
                    }
                },
                credits: {
                    enabled: false
                },
                tooltip: {
                    xDateFormat: '%d/%m/%Y',
                    pointFormat: ' : <b>{point.y} €</b>',
                    shared: true
                },
                series: [{
                    type: 'area',
                    fillOpacity: 0.5,
                    color: 'rgba(67,160,71,0.68)',
                    data: element
                }]
            })
        }

        function getGasPrices(value) {
            $.get({
                url: '{{ path('ajax_gas_station_id_gas_prices') }}',
                type: 'GET',
                async: true,
                data: {'year': value, 'gasStationId': '{{ gasStation.id }}'},
                success: function (elements) {
                    var data = []
                    var gasTypes = {}

                    $('.charts').remove()

                    if (elements.length === 0) {
                        $('.chart_prices').append("<div class='charts chart_prices_none'><p>Aucune données pour cette année.</p> </div>")
                        return false;
                    }

                    $.each(elements, function (index, price) {
                        if (data.hasOwnProperty(price.gas_type_id)) {
                            data[price.gas_type_id].push([parseFloat(price.date_timestamp), parseFloat(price.value)])
                        } else {
                            data[price.gas_type_id] = []
                        }

                        if (false === gasTypes.hasOwnProperty(price.gas_type_id)) {
                            gasTypes[price.gas_type_id] = {id: price.gas_type_id, label: price.label, reference: price.reference}
                        }
                    })

                    data.forEach(function(item, index){
                        $('.chart_prices').append("<div id='" + gasTypes[index]['reference'] + "_chart' class='charts'></div>")
                        loadCharts(item, gasTypes[index])
                    })
                }
            })
        }

        $('#gas_year .ui.dropdown').dropdown({
            action: 'activate',
            onChange: function (value) {
                getGasPrices(value)
            },
        })

        getGasPrices(null)

    </script>
{% endblock %}

